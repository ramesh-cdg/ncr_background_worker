# Docker Compose file for NCR Upload API
# Uses latest Docker Compose syntax

services:
  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: ncr_redis
    ports:
      - "6380:6379"  # External port 6380, internal port 6379
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI Application with Gunicorn
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    network_mode: "host"
    environment:
      - REDIS_HOST=localhost
      - REDIS_PORT=6380  # External Redis port
      - GUNICORN_WORKERS=4
      - GUNICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker
      - GUNICORN_BIND=0.0.0.0:8001
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py worker --concurrency 4
    network_mode: "host"
    environment:
      - REDIS_HOST=localhost
      - REDIS_PORT=6380  # External Redis port
    env_file:
      - .env
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat Scheduler
  beat:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py beat
    network_mode: "host"
    environment:
      - REDIS_HOST=localhost
      - REDIS_PORT=6380  # External Redis port
    env_file:
      - .env
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Flower Monitoring
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py flower
    network_mode: "host"
    environment:
      - REDIS_HOST=localhost
      - REDIS_PORT=6380  # External Redis port
    env_file:
      - .env
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  redis_data:
