# Docker Compose file for NCR Upload API
# Uses latest Docker Compose syntax

services:
  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: ncr_redis
    ports:
      - "6380:6379"  # External port 6380, internal port 6379
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # FastAPI Application with Gunicorn
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"  # Internal port for nginx proxy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal Redis port
      - GUNICORN_WORKERS=8
      - GUNICORN_WORKER_CLASS=uvicorn.workers.UvicornWorker
      - GUNICORN_BIND=0.0.0.0:8001
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Celery Worker
  worker:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py worker --concurrency 8
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal Redis port
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Beat Scheduler
  beat:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py beat
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal Redis port
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Flower Monitoring
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python start_worker.py flower
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379  # Internal Redis port
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ncr_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot
    container_name: ncr_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@ncr-api.com --agree-tos --no-eff-email -d ncr-api.com
    profiles:
      - ssl-setup

volumes:
  redis_data:
  nginx_logs:
